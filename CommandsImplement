import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.Scanner;

import java.io.FileWriter;
import java.io.File;

import java.io.IOException;
import java.util.Objects;

import java.io.*;

import java.util.ArrayList;

import java.util.Scanner;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;


public class Main {
    public static void main(String[] args) throws IOException {

       CLI cli = new CLI();

       cli.start();


    }
}


class CLI{
    String currentPath;

    CLI(){
        this.currentPath = System.getProperty("user.dir");

    }


    public void start() throws IOException {

        Scanner scanner = new Scanner(System.in);
        System.out.println("Welcome to the Basic CLI.");

        while (true) {
            System.out.print("CLI> ");
            String input = scanner.nextLine().trim();
            if (input.isEmpty())
                continue;

            String[] commandParts = input.split(" ");
            String command = commandParts[0];

            String filename = null;
            String path = null;
            ArrayList<String> catRequirments = new ArrayList<String>();

            if(commandParts.length>1){

                path = commandParts[1];
                catRequirments.add(path);

            }
             if(commandParts.length>2) {
                 filename = commandParts[2];
                 catRequirments.add(filename);


            }
             if(commandParts.length>3) {

                 for(int i=3;i<commandParts.length;i++){
                     catRequirments.add(commandParts[i]);
                 }

             }


            if(!Objects.equals(path, ">") && !Objects.equals(path, ">>")) { // False True

                switch (command) {
                    case "pwd":

                        pwd();
                        break;
                    case "exit":
                        // return is a must to exit cmd
                        exit();
                        return;
                    case "help":
                        help();
                        break;
                    case "cd":
                        cd(path);
                        break;
                    case "rmdir":
                        rmdir(path);
                        break;
                    case "rm":
                        rm(path);
                        break;
                    case "touch":
                        touch(path);
                        break;
                    case "mv":
                        mv(path,filename);
                        break;
                    case "cat":
                        cat(catRequirments);
                        break;
                }
            }

            else if (path.equals(">")) {
               greater_than(command,filename);
            }
            else if (path.equals(">>")){
                double_greater_than(command,filename);

            }
            else System.out.println("Unknown command.");
        }
    }
    public String pwd() {
        String currentPath = "" + Paths.get("").toAbsolutePath();
        System.out.println("Current Directory: " + currentPath);
        return currentPath;
    }
    public String exit() {
        System.out.println("Exiting CLI.");
        return "Exiting CLI.";
    }
    public File cat(ArrayList<String> input) throws IOException {
        File file = null;
        String option = input.get(1);
        if (option.equals(">>") || option.equals(">")) {
            String path = removeQuotes(input.get(2));
            String fullPath = getPath(path);
            file = new File(fullPath);
            try (FileWriter myWriter = new FileWriter(file, option.equals(">>"))) {
                Scanner scan = new Scanner(System.in);
                String inputs;
                myWriter.write("\n");
                while (scan.hasNext()) {
                    inputs = scan.nextLine();
                    myWriter.write(inputs + "\n");
                }
            }
        }
        else {
            try {
                String path = input.get(1);
                if (path.startsWith("/") && path.endsWith("/")) {
                    path = path.substring(1, path.length() - 1);
                }
                path = getPath(path);
                file = new File(path);
                try (Scanner read = new Scanner(file)) {
                    while (read.hasNextLine()) {
                        String data = read.nextLine();
                        System.out.println(data);
                    }
                }
            } catch (FileNotFoundException e) {
                System.out.println("File not found.");
                e.printStackTrace();
            }
        }
        return file;
    }
    public String cd(String fileName){
        if(Objects.equals(fileName, "..") && currentPath!= ""){
            int ind = currentPath.lastIndexOf('/');
            currentPath = currentPath.substring(0,ind);
        }
        else if(Objects.equals(fileName.charAt(0), '/')){
            currentPath=fileName;
        }

        else {
            String path = currentPath +"/"+fileName ;
            File DirName = new File(path);
            if (DirName.isDirectory() && DirName.exists()) {
                currentPath = path;
            } else {
                System.out.println("cant cd to " + DirName.getName() + " No such directory");

            }
        }
        return currentPath;

    }
    public boolean rmdir(String fileName){

        String path = currentPath +"/"+ fileName;
        File dir = new File(path);
        String[] iii = dir.list();
        boolean availabe = iii!=null;
        int size=0;
        if(availabe) {
            for (String i : iii) {
                size++;
            }
        }
        if(dir.exists() && size<0 ) {
            dir.delete();
            return true;
        }

        else if(size==0) System.out.print("cant delete "+dir.getName()+". file doesn't exist.");
        else System.out.print("cant delete "+dir.getName()+" dir is not empty.");
        return false;
    }
    public Boolean rm(String sourcePath){
        sourcePath = removeQuotes(sourcePath);
        sourcePath = getPath(sourcePath);
        File file = new File(sourcePath);
        if (file.isDirectory()){
            System.out.println("rm: cannot remove '" + sourcePath + "': Is a directory");
            return false;
        }
        else {
            file.delete();
            return true;
        }
    }


    public Boolean mv(String sourcePath, String destinationPath) throws IOException {
        sourcePath = removeQuotes(sourcePath);
        destinationPath = removeQuotes(destinationPath);
        sourcePath = getPath(sourcePath);
        destinationPath = getPath(destinationPath);
        File sourceFile = new File(sourcePath);
        File destinationFile = new File(destinationPath);
        if (destinationFile.isDirectory()) {
            Path source = sourceFile.toPath();
            Path destination = Paths.get(destinationPath, sourceFile.getName());
            Files.move(source, destination);
        } else {
            boolean success = sourceFile.renameTo(destinationFile);
            if (!success) {
                System.out.println("Move operation failed.");
                return false;
            }

        }
        return true;
    }
    public String removeQuotes(String path){
        if(path.startsWith("/") && path.endsWith("/")){
            path = path.substring(1,path.length()-1);
        }
        while(path.endsWith("/") || path.endsWith("/")){
            path = path.substring(0, path.length() - 1);
        }
        return path;
    }
    public String getPath(String filename){
        File file = new File(filename);
        if(file.isAbsolute() || (file.isDirectory() && filename.endsWith(":"))){
            return filename;
        }
        else {
            return currentPath + "/" + filename;
        }
    }

    public String greater_than (String method1, String FileName){ // >
        String res;
        switch (method1) {
            case "pwd" -> res = pwd();
            case "ls" -> res = ls();
            case "ls -a" -> res = ls();
            case "ls -r" -> res = ls();
            case "help" -> res = """
                    Available commands:
                    pwd       - Print the current working directory
                    cd        - Change directory\s
                    ls        - List files in the current directory
                    ls -a     - List all files, including hidden\s
                    ls -r     - List files in reverse order\s
                    mkdir     - Create a new directory\s
                    rmdir     - Remove a directory\s
                    touch     - Create an empty file\s
                    mv        - Move or rename a file
                    rm        - Remove a file
                    cat       - Display the contents of a file
                    >         - Redirect output to a file\s
                    >>        - Append output to a file
                    exit      - Terminate the CLI
                    help      - Displays available commands and their usage""";
            case "cat" -> {
                Scanner myObj = new Scanner(System.in);
                res = myObj.nextLine();
            }
            case null, default -> res = method1;
        }
        try {
            FileWriter myFile = new FileWriter(FileName);
            myFile.write(res);
            myFile.close();

        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }

        return res;

    };

    public Boolean double_greater_than (String method1, String FileName){ // >
        String res;
        if(Objects.equals(method1, "pwd")){
            res = pwd();
        }
        else if (Objects.equals(method1, "ls")) {
            res = ls();

        }
        else if (Objects.equals(method1, "ls -a")) {
            res = ls();

        }
        else if (Objects.equals(method1, "ls -r")) {
            res = ls();

        }
        else if (Objects.equals(method1, "help")) {
            res = """
                    Available commands:
                    pwd       - Print the current working directory
                    cd        - Change directory\s
                    ls        - List files in the current directory
                    ls -a     - List all files, including hidden\s
                    ls -r     - List files in reverse order\s
                    mkdir     - Create a new directory\s
                    rmdir     - Remove a directory\s
                    touch     - Create an empty file\s
                    mv        - Move or rename a file
                    rm        - Remove a file
                    cat       - Display the contents of a file
                    >         - Redirect output to a file\s
                    >>        - Append output to a file
                    exit      - Terminate the CLI
                    help      - Displays available commands and their usage""";
        }
        else if(Objects.equals(method1, "cat")){
            Scanner myObj = new Scanner(System.in);
            res = myObj.nextLine();
        }
        else{
            res = method1;
        }

       // FileWriter myFile = new FileWriter(FileName);
        File newFile = new File(currentPath +"/" + FileName);
        if(newFile.exists()) {
            try {
                FileWriter myFile = new FileWriter(currentPath +"/" + FileName);
                myFile.write(res);
                myFile.close();

            } catch (IOException e) {
                System.out.println("An error occurred.");
                e.printStackTrace();
                return false;
            }
        }
        else {
            System.out.println("File does not exist");
            return false;
        }
        return true;

    };

    public String ls() {
        return "";
    }

    public String touch(String filename){
        String CurrPath = currentPath;
        //System.out.println(pwd());
        if(filename.contains("/")) {
            int ind = filename.lastIndexOf('/');
            String path = filename.substring(0, ind);
            File newFile = new File(currentPath+ "/"+path);
           // System.out.println(currentPath+ "/"+path);
            if(newFile.exists()){//dir exists
                cd(path);
              //  System.out.println(currentPath);
                String name= filename.substring(ind);
                System.out.println(path);
                try {

                    // Get the file
                    File addFile = new File(currentPath+ "/"+name);
                    // Create new file
                    // if it does not exist

                    //System.out.println(currentPath+ "/"+path);
                    if (addFile.createNewFile())
                        System.out.println("File created");
                    else
                        System.out.println("File already exists");
                }
                catch (Exception e) {
                    System.err.println(e);
                }


            }
            else System.out.println("No such file or directory");
        }
        else {
            try {


                File addFile = new File(currentPath+"/"+filename);

                if (addFile.createNewFile())
                    System.out.println("File created");
                else {

                    System.out.println("File already exists");
                    return currentPath;
                }
            } catch (Exception e) {

                System.err.println(e);
                return currentPath;
            }
        }
        cd(CurrPath);

        return currentPath+"/"+filename;
    }

    public void help() {
        System.out.println("Available commands:");
        System.out.println("  pwd       - Print the current working directory");
        System.out.println("  cd        - Change directory ");
        System.out.println("  ls        - List files in the current directory");
        System.out.println("  ls -a     - List all files, including hidden ");
        System.out.println("  ls -r     - List files in reverse order ");
        System.out.println("  mkdir     - Create a new directory ");
        System.out.println("  rmdir     - Remove a directory ");
        System.out.println("  touch     - Create an empty file ");
        System.out.println("  mv        - Move or rename a file");
        System.out.println("  rm        - Remove a file");
        System.out.println("  cat       - Display the contents of a file");
        System.out.println("  >         - Redirect output to a file ");
        System.out.println("  >>        - Append output to a file");
        System.out.println("  exit      - Terminate the CLI");
        System.out.println("  help      - Displays available commands and their usage");
    }





}


// public class CommandLineInterpreter {

//     public static void main(String[] args) {
//         CommandLineInterpreter cli = new CommandLineInterpreter();
//         cli.start();
//     }

//     public void start() {
//         Scanner scanner = new Scanner(System.in);
//         System.out.println("Welcome to the Basic CLI.");

//         while (true) {
//             System.out.print("CLI> ");
//             String input = scanner.nextLine().trim();
//             if (input.isEmpty())
//                 continue;

//             String[] commandParts = input.split(" ");
//             String command = commandParts[0];

//             switch (command) {
//                 case "pwd":
//                     pwd();
//                     break;
//                 case "exit":
//                     // return is a must to exit cmd
//                     exit();
//                     return;
//                 case "help":
//                     help();
//                     break;
//                 default:
//                     System.out.println("Unknown command.");
//             }
//         }
//     }

//     public String pwd() {
//         String currentPath = "" + Paths.get("").toAbsolutePath();
//         System.out.println("Current Directory: " + currentPath);
//         return currentPath;
//     }

//     public String exit() {
//         System.out.println("Exiting CLI.");
//         return "Exiting CLI.";
//     }

//     public void help() {
//         System.out.println("Available commands:");
//         System.out.println("  pwd       - Print the current working directory");
//         System.out.println("  cd        - Change directory ");
//         System.out.println("  ls        - List files in the current directory");
//         System.out.println("  ls -a     - List all files, including hidden ");
//         System.out.println("  ls -r     - List files in reverse order ");
//         System.out.println("  mkdir     - Create a new directory ");
//         System.out.println("  rmdir     - Remove a directory ");
//         System.out.println("  touch     - Create an empty file ");
//         System.out.println("  mv        - Move or rename a file");
//         System.out.println("  rm        - Remove a file");
//         System.out.println("  cat       - Display the contents of a file");
//         System.out.println("  >         - Redirect output to a file ");
//         System.out.println("  >>        - Append output to a file");
//         System.out.println("  exit      - Terminate the CLI");
//         System.out.println("  help      - Displays available commands and their usage");
//     }
// }
